This is a simplistic game engine written in vanilla JavaScript (i.e. no frameworks). It uses an HTML file with a canvas element to render.
Note that in order to get a nice crisp image (not blurred) with the correct ratio, the dimensions of the canvas should be specified (the same of course)
in both HTML and CSS files. The canvas element needs to have an id = "gameCanvas". If you want a different name, change the common.js file

The game engine is designed to be modular, so that you have only to change very few files in order to make everything work. Now there are
only two files that give you the power to make everything work: In the Interface Scripts directory, GameObjectsInterface, GameStateInterface. These two
files manipulate the GameStateManager and GameObjectsManager modules.

------ GameStateManager ------
1. GameStateManager has a gameState property which is an object containing: name, Update() and Render(). The name is just an identifier, 
Update() and Render() are updating and rendering FOR THE CURRENT GAME STATE. So make sure that everything that should be updating is Updating() 

GameStateManager.gameState = <GAMESTATE>
// put the <GAMESTATE> in a different file, in GameStates/<GAMESTATE>.js
const <GAMESTATE> = 
{
  name: <STRING_IDENTIFIER>,
  Update: function() {},
  Render: function() {}
}

Right now, all the modules that need to be Updated() are the following. As you extend the game engine, this list should increase :)
Game.GameObjectsManager.Update(); // Update() all gameObjects
Game.GameStateManager.Update();   // Run all transition managers

2. Transition Managers are just checking functions. There can be as many of them as you need. Add them to GameStateInterface to the bottom of the file
and make sure that you push() them in the GameStateManager.transitionManagers array in Init(). Also bind() them to GameStateManager, for simplicity.

Transition Managers usually check for certain key presses or different and change GameStateManager.gameState = DifferentGameState

------ GameObjectsManager ------
1. gameObjects is an array containing all the gameObjects, no matter the type. In GameObjectsManager.Update() all of them are Updated(), 
and in GameObjectsManager.Render() all of them are Rendered() (** an gameObject class can define and empty Render() if it's not needed to Render() the objects)